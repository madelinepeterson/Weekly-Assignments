**This assignment is a download of the identified proteins from an unknown organism. Using chosen and specific reference sequences in BLAST, this code will identify heat shock proteins and related proteins.

Downloading the list of identified protein sequences from the organism:
  wget https://github.com/stechtmann/BL4300-5300/raw/master/data/Weekly_Assignment_data/Unk_therm.faa

Downloading a list of reference proteins 
  wget https://github.com/stechtmann/BL4300-5300/raw/master/data/Weekly_Assignment_data/HSP_prot.fast

Then create a database specifically for the purpose of identifying specific proteins.
  makeblastdb -in Unk_therm.faa -dbtype prot -title Unk_therm_proteins
  
Now that the database is created, we can compare the unknown protein sequences to sequences of known proteins within the same family.
  blastp -db Unk_therm.faa -query HSP_prot.fasta -out HSP_BLAST.txt -outfmt 7
  
This last line creates a .txt output file which we can open in WinSCP.

Helpful site for next steps: 
https://pythonforbiologists.com/tools-for-tabular-data

To organize the data into showing only the information we want, query accession#, % ID, length, escore, and bitscore, and save it as it's own file.
  cut  -f 1,3,4,11,12  HSP_BLAST.txt > edited.txt
  sort -k11,11 -n -r edited.txt
  NOTE: these do not get rid of the unwanted lines and still separates hits by query db.
  
  sed -i "/\b\#\b/d" filename
  sed "/\b\#\b/d" HSP_BLAST.txt
  NOTE: did not work

This code removed all of the comment lines and created a new file with just the values and no separation of query db using -v which is reverse grep.
  grep -vw "#" HSP_BLAST.txt > no_comments.txt
  
Now I can organize and edit the information I want more easily with the commands I used before.
    cut  -f 1,3,4,11,12  no_comments.txt > edited.no_comments.txt
Sorts by the 4th column in my edited data, which is evalue.    
    sort -k4,4 -n -r edited.no_comments.txt 
Counts how many total hits:
    wc -l edited.no_comments.txt

To pull only those results that have a bit score of >31. 
Trying to sort by evalue gets tricky because of the scientific nomenclature. If there were more hits to sort through, we could build a pipe to sort this output by another additional parameter, like %ID or length.
    awk '$5>31' edited.no_comments.txt | sort -k5,5 -n -r > HSP.top_bitscore.txt

    
Here, we can see: 
**How many HSPs were found in the unknown organism?
A total of 71 were found upon the initial BLAST. Out of those 71 found, only 12 had a bit score above 31, a cutoff that is roughly equivalent to a p-value of 0.05. I would only count these 12 as "good hits".
  
**Provide your justification for how many HSPs were in the organism (use information in the BLAST ouput E-value, length, percent ID, etc).
In addition to counting the "good hits" as having a bit score of above 31, we can see that these 12 hits show a shared squence at least 25% between the subject and the query sequence. These 12 hits I would consider to be orthologous. High bit scores are also roughly telling of the evalue, with the highest bitscore hits also having the higher evalues. The top three hits, and this the 3 hits with the highest bitscore and evalue, also have the largest alignments lengths, 537, 559, and 632 respectively.
  
**How many HSP have paralogs?
From this short list, 3 of these HSP as having paralogs.

**Provide a justification for the presence of paralogs.
Paralogs are genes in the same organism that share a common ancestry. We can identify these by vieing our BLAST output and identifying how many of the subject protein sequences match with a protein present in one of the query sequences. In my good hit list, there are 3 HSP that have paralogs. Two of these genes have only 1 paralogous pair, while the third has 4 paralogs.



  
  
  
